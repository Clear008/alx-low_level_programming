!<arch>
0-isupper.c/    0           0     0     644     238       `
#include "main.h"
/**
 *_isupper - function that checks for uppercase character.
 *@c: is a character
 *Return: 1 if c is uppercase Returns 0 otherwise
*/

int _isupper(int c)
{

if (c >= 'A'  && c <= 'Z')

return (1);
else
return (0);
}
0-memset.c/     0           0     0     644     408       `
#include "main.h"
/**
 * _memset - fills memory with a constant byte
 * @s: pointer to the block of memory to be fill
 * @b: the constant byte
 * @n: number of bytes to be set to the value
 * Return: a pointer to the memory area s
 */
char *_memset(char *s, char b, unsigned int n)
{

unsigned char *p = (unsigned char *) s;

unsigned int i;
for (i = 0; i < n ; i++)

p[i] = (unsigned char)b;

return (s);
}
0-strcat.c/     0           0     0     644     318       `
#include "main.h"
/**
 * _strcat - function that concatenates two strings.
 *@dest: a string
 *@src: a string
 *Return: dest
*/
char *_strcat(char *dest, char *src)
{
int i, j;

for (i = 0 ; dest[i] != '\0'; i++)
{
}


for (j = 0 ; src[j] != '\0'; j++)
{
dest[i + j] = src[j];
}

dest[i + j] = '\0';

return (dest);
}
100-atoi.c/     0           0     0     644     304       `
#include "main.h"
/**
 * _atoi - convert a string to an integer
 *@s: string
 *Return: result
*/
int _atoi(char *s)
{
unsigned int n = 0;
int sign = 1;

do {
if (*s == '-')
sign *= -1;
else if (*s >= '0' && *s <= '9')
n = (n * 10) + (*s - '0');
else if (n > 0)
break;
} while (*s++);
return (n *sign);
}
1-isdigit.c/    0           0     0     644     221       `
#include "main.h"
/**
 *_isdigit  - check if c is a lowercase
 *@c :is a character to be checked
 *Return: 1 if c is lowercase 0 otherwise
*/

int _isdigit(int c)
{
if (c >= 48 && c <= 57)

return (1);
else
return (0);
}

1-memcpy.c/     0           0     0     644     365       `
#include "main.h"
/**
 *_memcpy - copies memory area
 *@dest: destination pointer
 *@src: source pointer
 *@n: bytes from memory area
 *Return: a pointer to dest
 */
char *_memcpy(char *dest, char *src, unsigned int n)
{
unsigned int i = 0;
for (i = 0 ; src[i] != '\0' && i < n ; i++)
{
dest[i] = src[i];
}
for (; i < n ; i++)
{
dest[i] = '\0';
}

return (dest);
}

1-strncat.c/    0           0     0     644     353       `
#include "main.h"
/**
 * _strncat - function that concatenates two strings.
 *@dest: a string
 *@src: a string
 *@n: number of bytes
 *Return: dest
*/
char *_strncat(char *dest, char *src, int n)
{
int i, j;
for (i = 0 ; dest[i] != '\0'; i++)
{
}
for (j = 0 ; src[j] != '\0' && j < n; j++)
{
dest[i + j] = src[j];
}
dest[i + j] = '\0';
return (dest);
}

2-strchr.c/     0           0     0     644     291       `
#include "main.h"
/**
*_strchr - locates a character in a string
*@s: a string
*@c: a character
*Return: to the first occurrence of the character c in the string s
*/
char *_strchr(char *s, char c)
{
int i;
for (i = 0; s[i] >= '\0'; i++)
{
if (s[i] == c)

return (s + i);
}
return ('\0');
}

2-strlen.c/     0           0     0     644     200       `
#include "main.h"
/**
 *_strlen - returns the length of a string.
 *@s: a poniter
 *Return: length
*/
int _strlen(char *s)
{
int length = 0;
while (s[length] != '\0')
{
length++;
}
return (length);
}
2-strncpy.c/    0           0     0     644     314       `
#include "main.h"
/**
 * _strncpy -  function that copies a string.
 *@dest: a string
 *@src: a string
 *@n: number
 * Return: dest
*/

char *_strncpy(char *dest, char *src, int n)
{
int i;
for (i = 0 ; src[i] != '\0' && i < n ; i++)
{
dest[i] = src[i];
}
for (; i < n ; i++)
{
dest[i] = '\0';
}

return (dest);
}
3-islower.c/    0           0     0     644     224       `
#include "main.h"
/**
 *_islower  - check if c is a lowercase
 *@c :is a character to be checked
 *Return: 1 if c is lowercase 0 otherwise
*/

int _islower(int c)
{
if (c >= 'a' && c <= 'z')

return (1);
else
return (0);
}

3-puts.c/       0           0     0     644     185       `
#include "main.h"
/**
 * _puts - prints a string, followed by a new line
 * @str: a string
*/
void _puts(char *str)
{
while (*str != '\0')
{
_putchar(*str);
str++;
}
_putchar('\n');
}


3-strcmp.c/     0           0     0     644     359       `
#include "main.h"
/**
 * _strcmp - function that compares two strings
 *@s1: a string 1
 *@s2: a string 2
 *Return:  dest
*/
int _strcmp(char *s1, char *s2)
{
int i = 0;

while (s1[i] != '\0' && s2[i] != '\0')
{
if (s1[i] != s2[i])
{
return (s1[i] - s2[i]);
}
i++;
}

if (s1[i] != '\0')
{
return (1);
}
else if (s2[i] != '\0')
{
return (-1);
}

return (0);
}

3-strspn.c/     0           0     0     644     483       `
#include "main.h"
/**
 *_strspn - gets the length of a prefix substring
 *@s: the main c string  to be scanned
 *@accept: the string containing  a list of characters to match
 *Return: the number of bytes in the initial segment of s
 *which consist only of bytes from accept
*/
unsigned int _strspn(char *s, char *accept)
{
int i, j;
for (i = 0; s[i] != '\0'; i++)
{
for (j = 0; accept[j] != '\0'; j++)
{
if (s[i] == accept[j])
break;
}
if (accept[j] == '\0')
break;
}
return (i);
}

4-isalpha.c/    0           0     0     644     268       `
#include "main.h"
/**
 *_isalpha  - check if c is a lowercase or uppercase
 *@c :is a character to be checked
 *Return: 1 if c is lowercase 0 otherwise
*/

int _isalpha(int c)
{
if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z'))
{
return (1);
}
else
return (0);
}

4-strpbrk.c/    0           0     0     644     448       `
#include "main.h"
/**
 *_strpbrk - searches a string for any of a set of bytes
 *@s: a string to be scanned
 *@accept: string containing the character to match
 *Return: to the byte in s that matches one of the bytes in accept,
 *or NULL if no such byte is found
 */
char *_strpbrk(char *s, char *accept)
{
int i, j;
for (i = 0; s[i] != '\0'; i++)
{
for (j = 0; accept[j] != '\0'; j++)
{
if (s[i] == accept[j])
return (&s[i]);
}
}
return ('\0');
}
5-strstr.c/     0           0     0     644     489       `
#include "main.h"
/**
 *_strstr - _strstr locates a substring
 *@haystack: the string to be scanned
 *@needle: the string to search with in haystack
 *Return: to the beginning of the located substring,
 *or NULL if the substring is not found.
 */
char *_strstr(char *haystack, char *needle)
{
int i, j;
for (i = 0; haystack[i] != '\0'; i++)
{
for (j = 0; needle[j] != '\0'; j++)
{
if (haystack[i + j] != needle[j])
break;
}
if (needle[j] == '\0')
return (&haystack[i]);
}
return ('\0');
}

6-abs.c/        0           0     0     644     174       `
#include "main.h"
/**
 *_abs  - the absolute value of an integer
 *@n: integer
 *Return: absolute value
*/

int _abs(int n)
{
if (n >= 0)
{
return (n);
}
else
return (-n);
}
9-strcpy.c/     0           0     0     644     354       `
#include "main.h"
/**
 *_strcpy - opies the string pointed to by src,
 *including the terminating null byte (\0), to the buffer pointed to by dest
 *@dest: a string
 *@src: a string
 *Return: value the pointer to dest
*/
char *_strcpy(char *dest, char *src)
{
int i = 0;
while (src[i] != '\0')
{
dest[i] = src[i];
i++;
}
dest[i] = '\0';
return (dest);
}
main.c/         0           0     0     644     148       `
#include "main.h"

int main(void)
{
    _puts("\"At the end of the day, my goal was to be the best hacker\"\n\t- Kevin Mitnick");
    return (0);
}
_putchar.c/     0           0     0     644     89        `
#include "main.h"
#include<unistd.h>

int _putchar(char c)
{
return (write(1, &c, 1));
}

